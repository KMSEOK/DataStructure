# -*- coding: utf-8 -*-
"""Stack.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gX1LRs_u6j2nnW2riwUsxRvVz2aiCNCS
"""

class Node:
  
  def __init__(self, data):
    self.data = data
    self.next = None
    
  def get_data(self):
    return self.data
  
  def get_next(self):
    return self.next
  
  def set_next(self, next):
    self.next = next
    
class Stack:
  
  def __init__(self):
    self.top = None
    self.size = 0
  
  def push(self, data):
    new_node = Node(data)
    self.size += 1
    if self.top is None:
      self.top = new_node
    else:
      new_node.set_next(self.top)
      self.top = new_node

  def print_stack(self):
    print(">> current stack")
    node = self.top
    while node is not None:
      print(node.get_data())
      node = node.get_next()
    print(">>>>>>>>>>>>>>>>")
  
  def pop(self):
    node = self.top
    if node is not None:
      self.top = node.get_next()
      self.size -= 1
    return node
  
  def get_size(self):
    return self.size


formula = "3+4*7 * (13*(5+8*(13-27)+99)/13 +3)+ 7*2"

stack = Stack()
result=  "OK"

for i in range(0, len(formula)):
  char = formula.__getitem__(i)
  if char == "(":
    stack.push(char)
    
  elif char == ")":
    result = stack.pop()
    print(result.get_data())
    if result is None:
      result = "ERROR"
      break
if stack.size != 0:
  result = "ERROR"




print(result)

